<b:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:b="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans 
  http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/security
  http://www.springframework.org/schema/security/spring-security-3.0.xsd">

  
  <!-- Using filters="none" operates by creating an empty filter chain. -->
  <!-- It isn't possible to apply a filter="none" attribute to the pattern /** -->
  <!-- since this is used by the name-space filter chain -->
  <!-- only use-expression="true" has been set that can access use Spring El (eg:hasRole('ROLE_USER'))  -->
  <http auto-config="true" use-expressions="true">
    <!-- static resource don't need to filter -->
    <intercept-url pattern="/css/**" filters="none"/>
    <intercept-url pattern="/images/**" filters="none"/>
    <intercept-url pattern="/scripts/**" filters="none"/>
    <intercept-url pattern="/password_forgotten.jsp" filters="none"/>
    <intercept-url pattern="/login.jsp" filters="none"/>
    <intercept-url pattern="/loginCheck" filters="none"/>
    <intercept-url pattern="/error/session_timeout.jsp" filters="none"/>
    
    <!-- set the login page and the redirect-URL of successful/failed login -->
    <form-login login-page="/login.jsp" 
     authentication-failure-url="/login.jsp?error=true"
     default-target-url="/index" always-use-default-target="true"/>
    
    <logout invalidate-session="true"  
      logout-success-url="/login.jsp"  
      logout-url="/j_spring_security_logout"/>
      
    <access-denied-handler error-page="/access_denied"/>
    
    <!-- set the redirect-URL of session timeout -->
    <session-management invalid-session-url="/error/session_timeout.jsp"/>
  
    <!-- add a user-defined filter, and located it before FILTER_SECURITY_INTERCEPTOR -->
    <!-- this filter is used to manage DataBase information include USER/ROLE/AUTHORITY -->
    <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
    
  </http>
  
  <!-- a self-defined filter which has three properties: -->
  <!-- authenticationManager/accessDecisionManager/securityMetadataSource -->
  <b:bean id="myFilter" class="org.pmp.security.MyFilterSecurityInterceptor">
    <b:property name="authenticationManager"
      ref="authenticationManager">
    </b:property>
    <b:property name="accessDecisionManager"
      ref="myAccessDecisionManager">
    </b:property>
    <b:property name="securityMetadataSource"
      ref="mySecurityMetadataSource">
    </b:property>
  </b:bean>
  
  <!-- set alias for authentication-manager -->
  <authentication-manager alias="authenticationManager">
    <authentication-provider user-service-ref="MyUserDetailsService">
    </authentication-provider>
  </authentication-manager>
  
  <!-- define a AccessDecisionManager -->
  <b:bean id="myAccessDecisionManager" class="org.pmp.security.MyAccessDecisionManager">
    <b:property name="decisionVoters">
      <b:list>
        <!-- set rolePrefix of the roleVoter -->
        <b:bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
          <b:property name="rolePrefix" value="AUTH_" />
        </b:bean>
        <b:bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
      </b:list>
    </b:property>
  </b:bean>
 
  <!-- resource data define. associate resource with authority -->
  <!-- which means define what resources can be accessed by a specific role -->
  <b:bean id="mySecurityMetadataSource" class="org.pmp.security.MyInvocationSecurityMetadataSource">
    <b:constructor-arg ref="securityService"></b:constructor-arg>
  </b:bean>
  
  
</b:beans>