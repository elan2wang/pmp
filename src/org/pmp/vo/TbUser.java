package org.pmp.vo;

// Generated 2012-3-27 12:23:42 by Hibernate Tools 3.4.0.CR1

import java.io.Serializable;
import java.util.Collection;
import java.util.Comparator;
import java.util.Set;
import java.util.SortedSet;
import java.util.TreeSet;

import org.pmp.security.MyUserDetails;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.util.Assert;


/**
 * TbUser generated by hbm2java
 */
public class TbUser implements MyUserDetails,java.io.Serializable {
    //~ TbUser Entity fields ===========================================================================================	
    private Integer userId;
    private String username;
    private String password;
    private String realname;
    private String mobile;
    private String identify;
    private String position;
    private String userDesc;
    private boolean enabled;
    private boolean issys;
    
    //~ UserDetails fields =============================================================================================
    private  Collection<GrantedAuthority> authorities;
    private  boolean accountNonExpired;
    private  boolean accountNonLocked;
    private  boolean credentialsNonExpired;

    //~ Constructor ====================================================================================================
    public TbUser() {
    }

    public TbUser(Integer userId) {
	this.userId = userId;
    }

    public TbUser(Integer userId, String username, String password,
	    String realname, String mobile, String identify, String position,
	    String userDesc, boolean enabled, boolean issys, boolean accountNonExpired,
	    boolean accountNonLocked,boolean credentialsNonExpired,
	    Collection<GrantedAuthority> authorities) {
	this.userId = userId;
	this.username = username;
	this.password = password;
	this.realname = realname;
	this.mobile = mobile;
	this.identify = identify;
	this.position = position;
	this.userDesc = userDesc;
	this.enabled = enabled;
	this.issys = issys;
	this.accountNonExpired = accountNonExpired;
	this.accountNonLocked = accountNonLocked;
	this.credentialsNonExpired = credentialsNonExpired;
	this.authorities = authorities;
    }
    
    //~ Methods ========================================================================================================
    public boolean equals(Object rhs) {
	if (!(rhs instanceof TbUser) || (rhs == null)){
	    return false;
	}
	
	TbUser user = (TbUser)rhs;
	if (!authorities.equals(user.authorities)){
	    return false;
	}
	
	return (this.getPassword().equals(user.getPassword()) && this.getUsername().equals(user.getUsername())
        && (this.isAccountNonExpired() == user.isAccountNonExpired())
        && (this.isAccountNonLocked() == user.isAccountNonLocked())
        && (this.isCredentialsNonExpired() == user.isCredentialsNonExpired())
        && (this.isEnabled() == user.isEnabled()));
    }

    public int hashCode() {
        int code = 9792;
        
        for (GrantedAuthority authority : getAuthorities()) {
            code = code * (authority.hashCode() % 7);
        }
        
        if (this.getPassword() != null) {
            code = code * (this.getPassword().hashCode() % 7);
        }
        
        if (this.getUsername() != null) {
            code = code * (this.getUsername().hashCode() % 7);
        }
        
        if (this.isAccountNonExpired()) {
            code = code * -2;
        }
        
        if (this.isAccountNonLocked()) {
            code = code * -3;
        }
        
        if (this.isCredentialsNonExpired()) {
            code = code * -5;
        }
        
        if (this.isEnabled()) {
            code = code * -7;
        }
        
        return code;
    }

    private static SortedSet<GrantedAuthority> sortAuthorities(Collection<GrantedAuthority> authorities) {
    	Assert.notNull(authorities, "Cannot pass a null GrantedAuthority collection");
        // Ensure array iteration order is predictable (as per UserDetails.getAuthorities() contract and SEC-717)
        SortedSet<GrantedAuthority> sortedAuthorities =
        new TreeSet<GrantedAuthority>(new AuthorityComparator());
    
        for (GrantedAuthority grantedAuthority : authorities) {
            Assert.notNull(grantedAuthority, "GrantedAuthority list cannot contain any null elements");
            sortedAuthorities.add(grantedAuthority);
        }

        return sortedAuthorities;
    }

    private static class AuthorityComparator implements Comparator<GrantedAuthority>, Serializable {
    	private static final long serialVersionUID = 6545376456091519298L;
    
    	public int compare(GrantedAuthority g1, GrantedAuthority g2) {
            // Neither should ever be null as each entry is checked before adding it to the set.
            // If the authority is null, it is a custom authority and should precede others.
            if (g2.getAuthority() == null) {
                return -1;
            }
            if (g1.getAuthority() == null) {
                return 1;
            }
            return g1.getAuthority().compareTo(g2.getAuthority());
    	}
    }

    public String toString() {
    	StringBuilder sb = new StringBuilder();
    	sb.append(super.toString()).append(": ");
    	sb.append("Username: ").append(this.username).append("; ");
    	sb.append("Password: [PROTECTED]; ");
    	sb.append("Mobile: ").append(this.mobile).append("; ");
    	sb.append("Identify: ").append(this.identify).append("; ");
    	sb.append("Position: ").append(this.position).append("; ");
    	sb.append("UserDesc: ").append(this.userDesc).append("; ");
    	sb.append("ISSYS: ").append(this.issys).append("; ");
    	sb.append("Enabled: ").append(this.enabled).append("; ");
    	sb.append("AccountNonExpired: ").append(this.accountNonExpired).append("; ");
    	sb.append("credentialsNonExpired: ").append(this.credentialsNonExpired).append("; ");
    	sb.append("AccountNonLocked: ").append(this.accountNonLocked).append("; ");
    
        if (!authorities.isEmpty()) {
            sb.append("Granted Authorities: ");
            boolean first = true;
            for (GrantedAuthority auth : authorities) {
                if (!first) {
                    sb.append(",");
                }
                first = false;
                sb.append(auth);
            }
        } else {
            sb.append("Not granted any authorities");
        }
        
        return sb.toString();
    }
    //~ Getters and Setters ============================================================================================
    public Integer getUserId() {
	return this.userId;
    }

    public void setUserId(Integer userId) {
	this.userId = userId;
    }

    public String getUsername() {
	return this.username;
    }

    public void setUsername(String username) {
	this.username = username;
    }

    public String getPassword() {
	return this.password;
    }

    public void setPassword(String password) {
	this.password = password;
    }

    public String getRealname() {
	return this.realname;
    }

    public void setRealname(String realname) {
	this.realname = realname;
    }

    public String getMobile() {
	return this.mobile;
    }

    public void setMobile(String mobile) {
	this.mobile = mobile;
    }

    public String getIdentify() {
	return this.identify;
    }

    public void setIdentify(String identify) {
	this.identify = identify;
    }

    public String getPosition() {
	return this.position;
    }

    public void setPosition(String position) {
	this.position = position;
    }

    public String getUserDesc() {
	return this.userDesc;
    }

    public void setUserDesc(String userDesc) {
	this.userDesc = userDesc;
    }

    public boolean isEnabled() {
	return this.enabled;
    }

    public void setEnabled(boolean enabled) {
	this.enabled = enabled;
    }

    public boolean isIssys() {
	return this.issys;
    }

    public void setIssys(boolean issys) {
	this.issys = issys;
    }

    public Collection<GrantedAuthority> getAuthorities() {
        return authorities;
    }

    public void setAuthorities(Collection<GrantedAuthority> authorities) {
        this.authorities = authorities;
    }

    public boolean isAccountNonExpired() {
        return accountNonExpired;
    }

    public void setAccountNonExpired(boolean accountNonExpired) {
        this.accountNonExpired = accountNonExpired;
    }

    public boolean isAccountNonLocked() {
        return accountNonLocked;
    }

    public void setAccountNonLocked(boolean accountNonLocked) {
        this.accountNonLocked = accountNonLocked;
    }

    public boolean isCredentialsNonExpired() {
        return credentialsNonExpired;
    }

    public void setCredentialsNonExpired(boolean credentialsNonExpired) {
        this.credentialsNonExpired = credentialsNonExpired;
    }
}
